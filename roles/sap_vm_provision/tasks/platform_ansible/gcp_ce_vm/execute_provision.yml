---
# The tasks in this file are executed in a loop over the defined hosts

- name: Ensure short hostname is not longer than 13 characters (see SAP Note 611361)
  ansible.builtin.assert:
    that: (inventory_hostname | length | int) <= (13 | int)
    fail_msg: "FAIL: The length of the hostname is {{ inventory_hostname | length | int }} but must be less or equal to 13 characters!"

# When SAP HANA Scale-Out is used, if host name is not in original specifications then strip suffix node number from host name
- name: Set fact when performing SAP HANA Scale-Out
  ansible.builtin.set_fact:
    scaleout_origin_host_spec: "{{ inventory_hostname | regex_replace('^(.+?)\\d*$', '\\1') }}"
  when:
    - sap_vm_provision_calculate_sap_hana_scaleout_active_coordinator is defined
    - not inventory_hostname in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan].keys()

- name: Set fact for host specifications of the provision target
  ansible.builtin.set_fact:
    target_provision_host_spec: "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)] }}"

# Create flat list with names for each volume to be created.
- name: Set fact for target device map
  ansible.builtin.set_fact:
    storage_disks_map: |
      {% set disks_map = [] -%}
      {% for storage_item in target_provision_host_spec.storage_definition -%}
        {% for idx in range(0, storage_item.disk_count | default(1)) -%}
          {% if (storage_item.filesystem_type is defined) -%}
            {% if ('swap' in storage_item.filesystem_type and storage_item.swap_path is not defined)
            or ('swap' not in storage_item.filesystem_type and storage_item.nfs_path is not defined) -%}
              {% set vol = disks_map.extend([
              {
                'definition_key': storage_item.name,
                'name': storage_item.name + idx|string,
                'size': storage_item.disk_size | default(0),
                'type': storage_item.disk_type | default('pd-balanced'),
                'iops': storage_item.disk_iops | default(omit)
              }
              ]) %}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
      {%- endfor %}
      {{ disks_map }}


### LIMITATION - Must provision disks first and attach to VM. It is not possible to provision disks after the VM is provisioned, see https://github.com/ansible-collections/google.cloud/issues/193
# The volume creation task requires the above task to define the parameter
# which contains the calculated unique device names.
- name: Provision Google Cloud Persistent Disk volumes for Google Cloud VM filesystems
  no_log: "{{ __sap_vm_provision_no_log }}"
  register: __sap_vm_provision_task_provision_host_single_volumes
  google.cloud.gcp_compute_disk:
    state: present
    project: "{{ sap_vm_provision_gcp_project }}"
    zone: "{{ sap_vm_provision_gcp_region_zone }}"
    name: "{{ inventory_hostname + '-vol-' + vol_item.name | replace('_', '-')}}"
    size_gb: "{{ vol_item.size }}"
    type: "{{ vol_item.type }}"
    provisioned_iops: "{{ vol_item.iops | default(omit) }}"
    auth_kind: "serviceaccount"
    service_account_file: "{{ sap_vm_provision_gcp_credentials_json }}"
  loop: "{{ storage_disks_map }}"
  loop_control:
    loop_var: vol_item
    index_var: vol_item_index
    label: "{{ vol_item.definition_key }}: {{ vol_item.name }} (size: {{ vol_item.size }})"
  when:
    - vol_item.size > 0
#  failed_when: "(__sap_vm_provision_task_provision_host_single_volumes.msg is defined) and ('already exists' not in __sap_vm_provision_task_provision_host_single_volumes.msg)"


# Create list of disks to attach to GCP VM
- name: Set fact for target device map
  ansible.builtin.set_fact:
    provisioned_disks_map: |
      {% set disks_map = [
        {
          'auto_delete': 'true',
          'boot': 'true',
          'interface': 'SCSI',
          'initialize_params': {
            'disk_type': 'pd-standard',
            'source_image': __sap_vm_provision_task_gcp_os_image_info.resources[0].selfLink
          }
        }
      ] -%}
      {% for storage_item in __sap_vm_provision_task_provision_host_single_volumes.results -%}
        {% set vol = disks_map.extend([
        {
          'auto_delete': 'true',
          'boot': 'false',
          'interface': 'SCSI',
          'source': {
            'selfLink': storage_item.selfLink
          }
        }
        ]) %}
      {%- endfor %}
      {{ disks_map }}


- name: Provision Google Cloud VM
  no_log: "{{ __sap_vm_provision_no_log }}"
  register: __sap_vm_provision_task_provision_host_single
  google.cloud.gcp_compute_instance:
    state: present
    project: "{{ sap_vm_provision_gcp_project }}"
    zone: "{{ sap_vm_provision_gcp_region_zone }}"
    name: "{{ inventory_hostname }}"
    machine_type: "{{ target_provision_host_spec.virtual_machine_profile }}"
    can_ip_forward: "{{ target_provision_host_spec.disable_ip_anti_spoofing }}" # When disable the Anti IP Spoofing = true, then Can IP Forward = true
    network_interfaces:
      - network:
          selfLink: "{{ __sap_vm_provision_task_gcp_vpc_info.resources[0].selfLink }}"
        subnetwork:
          selfLink: "{{ __sap_vm_provision_task_gcp_vpc_subnet_info.resources[0].selfLink }}"
    # 'NVME interface is only supported for confidential VMs or the following VM families: [a3-vm, c1-metal, c2-metal, c3-metal, c3-vm, c3d-vm, ct5p-vm, g2-vm, h3-vm, m3-vm, t2a-vm]
    disks: "{{ provisioned_disks_map }}"
    metadata:
      enable-oslogin: false # Do not use GCP Project OS Login approach for SSH Keys
      block-project-ssh-keys: true # Do not use GCP Project Metadata approach for SSH Keys
      ssh-keys: "admin:{{ lookup('ansible.builtin.file', sap_vm_provision_ssh_host_public_key_file_path ) }}" # Uses the GCP VM Instance Metadata approach for SSH Keys. Shows in GCP Console GUI under 'SSH Keys' for the VM Instance. Can not use 'root' because SSH 'PermitRootLogin' by default is 'no'.
    service_accounts: # List of service accounts authorized for Google Cloud VM (allow access via Instance Metadata service to computeMetadata/v1/instance/service-accounts etc for fence_gce Fencing Agent)
      - email: "" # Empty string for service account name, will default to the "Compute Engine Default Service Account" for the GCP Project (e.g. xx-compute@developer.gserviceaccount.com)
        scopes:
          - "https://www.googleapis.com/auth/cloud-platform" # Allow full access to all Cloud APIs
          # ["compute-rw", "storage-rw", "logging-write", "monitoring-write", "service-control", "service-management"]
    auth_kind: "serviceaccount"
    service_account_file: "{{ sap_vm_provision_gcp_credentials_json }}"


- name: Read Google Cloud VM information
  no_log: "{{ __sap_vm_provision_no_log }}"
  register: __sap_vm_provision_task_provision_host_single_info
  google.cloud.gcp_compute_instance_info:
    project: "{{ sap_vm_provision_gcp_project }}"
    zone: "{{ sap_vm_provision_gcp_region_zone }}"
    filters:
      - name = {{ inventory_hostname }}
    auth_kind: "serviceaccount"
    service_account_file: "{{ sap_vm_provision_gcp_credentials_json }}"

- name: Create fact for delegate host IP
  ansible.builtin.set_fact:
    provisioned_private_ip: "{{ __sap_vm_provision_task_provision_host_single.networkInterfaces[0].networkIP }}"


- name: Copy facts to delegate host
  delegate_to: "{{ provisioned_private_ip }}"
  delegate_facts: true
  ansible.builtin.set_fact:
    delegate_sap_vm_provision_ssh_host_private_key_file_path: "{{ sap_vm_provision_ssh_host_private_key_file_path }}"
    # delegate_private_ip: "{{ __sap_vm_provision_task_provision_host_single.networkInterfaces[0].networkIP }}"
    # delegate_hostname: "{{ inventory_hostname }}"
    # delegate_sap_vm_provision_dns_root_domain_name: "{{ sap_vm_provision_dns_root_domain }}"

- name: Copy facts to delegate host - when using Bastion SSH Proxy connection from Ansible control node to target node/s
  delegate_to: "{{ provisioned_private_ip }}"
  delegate_facts: true
  ansible.builtin.set_fact:
    delegate_ssh_args_bastion: -o ProxyCommand='ssh -W %h:%p {{ sap_vm_provision_bastion_user }}@{{ sap_vm_provision_bastion_public_ip }} -p {{ sap_vm_provision_bastion_ssh_port }} -i {{ sap_vm_provision_ssh_bastion_private_key_file_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  when:
    - sap_vm_provision_bastion_execution
    - sap_vm_provision_bastion_user is defined or not sap_vm_provision_bastion_user == ''
    - sap_vm_provision_bastion_public_ip is defined or not sap_vm_provision_bastion_public_ip == ''
    - sap_vm_provision_bastion_ssh_port is defined or not sap_vm_provision_bastion_ssh_port == ''
    - sap_vm_provision_ssh_bastion_private_key_file_path is defined or not sap_vm_provision_ssh_bastion_private_key_file_path == ''


### begin block, parameters will be applied to each task within the block
- name: Allow login from root OS User
  remote_user: admin
  become: true
  become_user: root
  delegate_to: "{{ provisioned_private_ip }}"
  delegate_facts: true
  vars:
    ansible_ssh_private_key_file: "{{ delegate_sap_vm_provision_ssh_host_private_key_file_path }}"
    ansible_ssh_common_args: -o ConnectTimeout=180 -o ControlMaster=auto -o ControlPersist=3600s -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ForwardX11=no {{ delegate_ssh_args_bastion if delegate_ssh_args_bastion is defined else '' }}
  block:

    # Required as state: present on Ansible Module gcp_compute_instance does not allow for waiting until VM has booted
    # wait_for_connection is used instead to ensure connection is available before proceeding.
    - name: Wait until SSH connection is available
      ansible.builtin.wait_for_connection:
        timeout: 300

    - name: Create .ssh directory for root user
      ansible.builtin.file:
        path: /root/.ssh
        state: directory
        mode: '0744'

    - name: Create root authorized_keys file and entries
      ansible.builtin.copy:
        dest: /root/.ssh/authorized_keys
        mode: '0600'
        content: |
          {{ lookup('ansible.builtin.file', sap_vm_provision_ssh_host_public_key_file_path ) }}

    - name: Permit root login
      register: __sap_vm_provision_task_os_sshd_config
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: '(^PermitRootLogin no)'
        replace: 'PermitRootLogin yes'

    - name: Reload sshd service
      ansible.builtin.service:
        name: sshd
        state: reloaded
      when:
        - __sap_vm_provision_task_os_sshd_config.changed

### end of block


- name: Append loop value to register
  ansible.builtin.set_fact:
    __sap_vm_provision_task_provision_host_single: "{{ __sap_vm_provision_task_provision_host_single | combine( { 'host_node' : inventory_hostname } , { 'sap_host_type' : target_provision_host_spec.sap_host_type } , { 'sap_system_type' : (target_provision_host_spec.sap_system_type | default('')) } ) }}"

- name: Append output to merged register
  ansible.builtin.set_fact:
    register_provisioned_host_all: "{{ register_provisioned_host_all + [__sap_vm_provision_task_provision_host_single] }}"
