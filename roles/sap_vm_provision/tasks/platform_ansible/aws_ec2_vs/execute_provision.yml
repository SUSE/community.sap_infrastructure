---
# The tasks in this file are executed in a loop over the defined hosts

- name: Ensure short hostname is not longer than 13 characters (see SAP Note 611361)
  ansible.builtin.assert:
    that: (inventory_hostname | length | int) <= (13 | int)
    fail_msg: "FAIL: The length of the hostname is {{ inventory_hostname | length | int }} but must be less or equal to 13 characters!"

# When SAP HANA Scale-Out is used, if host name is not in original specifications then strip suffix node number from host name
- name: Set fact when performing SAP HANA Scale-Out
  ansible.builtin.set_fact:
    scaleout_origin_host_spec: "{{ inventory_hostname | regex_replace('^(.+?)\\d*$', '\\1') }}"
  when:
    - sap_vm_provision_calculate_sap_hana_scaleout_active_coordinator is defined
    - not inventory_hostname in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan].keys()

- name: Set fact for host specifications of the provision target
  ansible.builtin.set_fact:
    target_provision_host_spec: "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)] }}"

- name: Provision AWS EC2 Virtual Server instance
  register: __sap_vm_provision_task_provision_host_single
  no_log: "{{ __sap_vm_provision_no_log }}"
  amazon.aws.ec2_instance:
    state: started
    name: "{{ inventory_hostname }}"
    image_id: "{{ (__sap_vm_provision_task_aws_ami.images | sort(attribute='creation_date') | last).image_id }}"
    instance_type: "{{ target_provision_host_spec.virtual_machine_profile }}"
    key_name: "{{ sap_vm_provision_aws_key_pair_name_ssh_host_public_key }}"
    security_groups: "{{ sap_vm_provision_aws_vpc_sg_names }}"
    vpc_subnet_id: "{{ sap_vm_provision_aws_vpc_subnet_id }}"
    metadata_options:
      http_endpoint: enabled
#        http_put_response_hop_limit: 8
      http_tokens: optional # IMDSv1 = optional, IMDSv2 = required
#        instance_metadata_tags: disabled
    network:
      assign_public_ip: false
      source_dest_check: "{{ not target_provision_host_spec.disable_ip_anti_spoofing }}" # Disable the Anti IP Spoofing by setting Source/Destination Check to false
    # availability_zone: "{{ sap_vm_provision_aws_vpc_availability_zone }}" # Conflict with vpc_subnet_id
    placement: "{{ placement_dict if sap_vm_provision_aws_placement_strategy_spread else omit }}"
    access_key: "{{ sap_vm_provision_aws_access_key }}"
    secret_key: "{{ sap_vm_provision_aws_secret_access_key }}"
  vars:
    placement_dict:
      availability_zone: "{{ sap_vm_provision_aws_vpc_availability_zone }}"
      group_name: "{{ (
        (__sap_vm_provision_task_aws_placement_group.results | selectattr('item','==','hana'))[0].name
        if ('hana_primary' in target_provision_host_spec.sap_host_type or 'hana_secondary' in target_provision_host_spec.sap_host_type)
        else
        (__sap_vm_provision_task_aws_placement_group.results | selectattr('item','==','anydb'))[0].name
        if ('anydb_primary' in target_provision_host_spec.sap_host_type or 'anydb_secondary' in target_provision_host_spec.sap_host_type)
        else
        (__sap_vm_provision_task_aws_placement_group.results | selectattr('item','==','nwas'))[0].name
        if ('nwas_ascs' in target_provision_host_spec.sap_host_type or 'nwas_ers' in target_provision_host_spec.sap_host_type)
        ) | default(omit) }}"
      tenancy: default # default is shared tenancy

- name: Set fact for storage volume letters calculations (max 25 volumes)
  ansible.builtin.set_fact:
    storage_vol_letters: "bcdefghijklmnopqrstuvwxyz"

- name: Read AWS EC2 instance information
  register: __sap_vm_provision_task_provision_host_single_info
  no_log: "{{ __sap_vm_provision_no_log }}"
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ inventory_hostname }}"
      "instance-state-name": ["running"]
    access_key: "{{ sap_vm_provision_aws_access_key }}"
    secret_key: "{{ sap_vm_provision_aws_secret_access_key }}"

- name: Set fact for available storage volume device names
  ansible.builtin.set_fact:
    available_volumes: |-
      {% set letters = 'bcdefghijklmnopqrstuvwxyz' %}
      {% set volumes = [] %}
      {%- for letter in letters -%}
        {% for device in __sap_vm_provision_task_provision_host_single_info.instances[0].block_device_mappings -%}
          {% if '/dev/sd' + letter not in device.device_name -%}
            {% set dev = volumes.append('/dev/sd' + letter) %}
          {%- endif %}
        {%- endfor %}
      {% endfor %}
      {{ volumes | list | unique }}

# Combination of only the filesystem volume information from the lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')
# for volume device assignment.
# This task assigns device names for each volume to be created.
- name: Set fact for target device map
  ansible.builtin.set_fact:
    filesystem_volume_map: |
      {% set volume_map = [] -%}
      {% set av_vol = available_volumes -%}
      {% for storage_item in target_provision_host_spec.storage_definition -%}
        {% for idx in range(0, storage_item.disk_count | default(1)) -%}
          {% if (storage_item.filesystem_type is defined) -%}
            {% if ('swap' in storage_item.filesystem_type and storage_item.swap_path is not defined)
            or ('swap' not in storage_item.filesystem_type and storage_item.nfs_path is not defined) -%}
              {% set vol = volume_map.extend([
              {
                'definition_key': storage_item.name,
                'device': av_vol[0],
                'fstype': storage_item.filesystem_type | default('xfs'),
                'name': storage_item.name + idx|string,
                'size': storage_item.disk_size | default(0),
                'type': storage_item.disk_type | default('gp3'),
                'iops': storage_item.disk_iops | default(omit)
              }
              ]) %}
            {%- set _ = av_vol.pop(0) -%}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
      {%- endfor %}
      {{ volume_map }}


# The volume creation task requires the above task to define the parameter
# which contains the calculated unique device names.
- name: Provision AWS EBS volumes for AWS EC2 Virtual Server instance filesystems
  register: __sap_vm_provision_task_provision_host_single_volumes
  no_log: "{{ __sap_vm_provision_no_log }}"
  amazon.aws.ec2_vol:
    name: "{{ inventory_hostname }}-vol_{{ vol_item.name }}"
    instance: "{{ __sap_vm_provision_task_provision_host_single.instance_ids[0] }}"
    volume_type: "{{ vol_item.type }}"
    volume_size: "{{ vol_item.size }}"
    iops: "{{ vol_item.iops | default(omit) }}"
    device_name: "{{ vol_item.device }}"
    delete_on_termination: true
    access_key: "{{ sap_vm_provision_aws_access_key }}"
    secret_key: "{{ sap_vm_provision_aws_secret_access_key }}"
  loop: "{{ filesystem_volume_map }}"
  loop_control:
    loop_var: vol_item
    index_var: vol_item_index
    label: "{{ vol_item.definition_key }}: {{ vol_item.name }} (size: {{ vol_item.size }})"
  when:
    - vol_item.fstype is defined
    - vol_item.size > 0

- name: Read AWS EC2 instance information
  register: __sap_vm_provision_task_provision_host_single_info
  no_log: "{{ __sap_vm_provision_no_log }}"
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ inventory_hostname }}"
    access_key: "{{ sap_vm_provision_aws_access_key }}"
    secret_key: "{{ sap_vm_provision_aws_secret_access_key }}"

- name: Add host facts
  no_log: "{{ __sap_vm_provision_no_log }}"
  ansible.builtin.set_fact:
    filesystem_volume_map: "{{ filesystem_volume_map }}"
    __sap_vm_provision_task_provision_host_single_volumes: "{{ __sap_vm_provision_task_provision_host_single_volumes }}"
    __sap_vm_provision_task_provision_host_single_info: "{{ __sap_vm_provision_task_provision_host_single_info }}"
  delegate_to: "{{ inventory_hostname }}"
  delegate_facts: true

- name: Create fact for delegate host IP
  ansible.builtin.set_fact:
    provisioned_private_ip: "{{ __sap_vm_provision_task_provision_host_single.instances[0].private_ip_address }}"


- name: Copy facts to delegate host
  delegate_to: "{{ provisioned_private_ip }}"
  delegate_facts: true
  ansible.builtin.set_fact:
    delegate_sap_vm_provision_bastion_user: "{{ sap_vm_provision_bastion_user }}"
    delegate_sap_vm_provision_bastion_public_ip: "{{ sap_vm_provision_bastion_public_ip }}"
    delegate_sap_vm_provision_bastion_ssh_port: "{{ sap_vm_provision_bastion_ssh_port }}"
    delegate_sap_vm_provision_ssh_bastion_private_key_file_path: "{{ sap_vm_provision_ssh_bastion_private_key_file_path }}"
    delegate_sap_vm_provision_ssh_host_private_key_file_path: "{{ sap_vm_provision_ssh_host_private_key_file_path }}"
    delegate_private_ip: "{{ __sap_vm_provision_task_provision_host_single.instances[0].private_ip_address }}"
    delegate_hostname: "{{ inventory_hostname }}"
    delegate_sap_vm_provision_dns_root_domain_name: "{{ sap_vm_provision_dns_root_domain }}"


### begin block, parameters will be applied to each task within the block
- name: Allow login from root OS User
  remote_user: ec2-user
  become: true
  become_user: root
  delegate_to: "{{ provisioned_private_ip }}"
  delegate_facts: true
  vars:
    ansible_ssh_private_key_file: "{{ delegate_sap_vm_provision_ssh_host_private_key_file_path }}"
    ansible_ssh_common_args: -o ConnectTimeout=180 -o ControlMaster=auto -o ControlPersist=3600s -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ForwardX11=no -o ProxyCommand='ssh -W %h:%p {{ delegate_sap_vm_provision_bastion_user }}@{{ delegate_sap_vm_provision_bastion_public_ip }} -p {{ delegate_sap_vm_provision_bastion_ssh_port }} -i {{ delegate_sap_vm_provision_ssh_bastion_private_key_file_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  block:

    - name: Wait until SSH connection is available
      ansible.builtin.wait_for_connection:
        timeout: 300

    - name: Fix root authorized_keys entries
      ansible.builtin.replace:
        path: /root/.ssh/authorized_keys
        backup: true
        regexp: '(^.*ssh-)' # Allow ssh-rsa , ssh-ed25519 etc.
        replace: 'ssh-'

    - name: Permit root login
      register: __sap_vm_provision_task_os_sshd_config
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: '(^PermitRootLogin no)'
        replace: 'PermitRootLogin yes'

    - name: Reload sshd service
      ansible.builtin.service:
        name: sshd
        state: reloaded
      when:
        - __sap_vm_provision_task_os_sshd_config.changed

### end of block


- name: Append loop value to register
  ansible.builtin.set_fact:
    __sap_vm_provision_task_provision_host_single: "{{ __sap_vm_provision_task_provision_host_single | combine( { 'host_node' : inventory_hostname } , { 'sap_host_type' : target_provision_host_spec.sap_host_type } , { 'sap_system_type' : (target_provision_host_spec.sap_system_type | default('')) } ) }}"

- name: Append output to merged register
  ansible.builtin.set_fact:
    register_provisioned_host_all: "{{ register_provisioned_host_all + [__sap_vm_provision_task_provision_host_single] }}"
