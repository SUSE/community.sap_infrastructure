---
# The tasks in this file are executed in a loop over the defined hosts

- name: Ensure short hostname is not longer than 13 characters (see SAP Note 611361)
  ansible.builtin.assert:
    that: (inventory_hostname | length | int) <= (13 | int)
    fail_msg: "FAIL: The length of the hostname is {{ inventory_hostname | length | int }} but must be less or equal to 13 characters!"


# Use vmware.vmware_rest Ansible Collection for VMware vCenter REST API, for VMware vSphere 7.0.2+
# Does not use community.vmware Ansible Collection for legacy pyvmomi Python Package for VMware vCenter SOAP API


# When SAP HANA Scale-Out is used, if host name is not in original specifications then strip suffix node number from host name
- name: Set fact when performing SAP HANA Scale-Out
  ansible.builtin.set_fact:
    scaleout_origin_host_spec: "{{ inventory_hostname | regex_replace('^(.+?)\\d*$', '\\1') }}"
  when:
    - sap_hana_scaleout_active_coordinator is defined
    - not inventory_hostname in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan].keys()

- name: Identify VM Folder
  register: register_vmware_vm_folder
  vmware.vmware_rest.vcenter_folder_info:
    names: "{{ sap_vm_provision_vmware_vm_folder_name }}"
    type: VIRTUAL_MACHINE

- name: Identify Datacenter Cluster
  register: register_vmware_vm_cluster
  vmware.vmware_rest.vcenter_cluster_info:
    names: "{{ sap_vm_provision_vmware_vm_cluster_name }}"

- name: Identify Host in Datacenter Cluster
  register: register_vmware_vm_cluster_host
  vmware.vmware_rest.vcenter_host_info:
    names: "{{ sap_vm_provision_vmware_vm_cluster_host_name }}"

- name: Identify Datastore
  register: register_vmware_vm_cluster_datastore
  vmware.vmware_rest.vcenter_datastore_info:
    names: "{{ sap_vm_provision_vmware_vm_cluster_datastore_name }}"

- name: Identify Content Library (to store VM Template)
  register: register_vmware_vm_content_library
  vmware.vmware_rest.content_locallibrary:
    name: "{{ sap_vm_provision_vmware_vm_content_library_name }}"

- name: List all items in Content Library
  register: register_vmware_vm_content_library_items
  vmware.vmware_rest.content_library_item_info:
    library_id: "{{ register_vmware_vm_content_library.id }}"

- name: Identify VMware Template ID
  ansible.builtin.set_fact:
    vmware_vm_template_id: "{{ (register_vmware_vm_content_library_items.value | selectattr('type', '==', 'vm-template') | selectattr('name', '==', sap_vm_provision_vmware_vm_template_name) | first).id }}"

- name: Check if VM exists
  register: register_check_vm_exists
  vmware.vmware_rest.vcenter_vm_info:
    names: "{{ inventory_hostname }}"


- name: Set VM ID
  when: not register_check_vm_exists.value | length == 0
  ansible.builtin.set_fact:
    register_vmware_vm_cluster_host_id: "{{ register_check_vm_exists.value[0].vm }}" # VM ID

- name: Check VM status
  register: register_provisioned_host_single_info
  when: not register_check_vm_exists.value | length == 0
  vmware.vmware_rest.vcenter_vm:
    vm: "{{ register_vmware_vm_cluster_host_id }}" # VM ID


# VM creation block:
# This block is run when the VM does not exist yet.
- name: Block that provisions the VM
  when: register_check_vm_exists.value | length == 0
  block:

    # Deploy a Virtual Machine from a VM Template in a Content Library
    # Doc: https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.vm_admin.doc/GUID-6EA309BC-9113-449C-B668-ACBB363485C3.html
    - name: Provision VMware Virtual Machine based upon the VM Template
      register: register_provisioned_host_single
      vmware.vmware_rest.vcenter_vmtemplate_libraryitems:

        ## Virtual Machine target Hypervisor definition
        placement:
          folder: "{{ (register_vmware_vm_folder.value | first).folder }}"
          # resource_pool: ""
          cluster: "{{ (register_vmware_vm_cluster.value | first).cluster }}"
          host: "{{ (register_vmware_vm_cluster_host.value | first).host }}"

        ## Virtual Machine clone from VM Template definition
        template_library_item: '{{ vmware_vm_template_id }}' # ID of the Content Library Item with the source VM Template (not OVF) to be cloned and deployed
        state: deploy # Deploy the VM Template defined in template_library_item
        powered_on: false # Power on after VM Template is cloned and deployed
        session_timeout: 600 # 10 minutes

        ## Virtual Machine definition
        name: "{{ inventory_hostname }}"
        description: "{{ inventory_hostname }} created by Ansible Playbook for SAP"

        ## Virtual Machine main resources definition
        ## May cause conflict with powered_on parameter
        hardware_customization:
          cpu_update:
            num_cpus: "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].vmware_vm_cpu_threads }}"
            num_cores_per_socket: "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].vmware_vm_cpu_smt }}"
          memory_update:
            memory: "{{ (lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].vmware_vm_memory_gib | int) * 1024 }}" # MiB
          # nics:

        ## Virtual Machine Storage configuration
        ## Boot Disk will be loaded to this datastore
        disk_storage:
          datastore: "{{ (register_vmware_vm_cluster_datastore.value | first).datastore }}"
          # storage_policy:

      # # Report VM back only after it is done creating the clone image.
      # until: register_provisioned_host_single.vm.status != "image_locked"
      # retries: 120
      # delay: 5

### End of boot disk and VM creation block


- name: Set VM ID
  when: register_check_vm_exists.value | length == 0
  ansible.builtin.set_fact:
    register_vmware_vm_cluster_host_id: "{{ register_provisioned_host_single.value }}" # Returned from VM provision


- name: Check VM status
  register: register_provisioned_host_single_info
  vmware.vmware_rest.vcenter_vm:
    vm: "{{ register_vmware_vm_cluster_host_id }}"


# Example https://cloudinit.readthedocs.io/en/23.4.1/reference/datasources/vmware.html#walkthrough-of-guestinfo-keys-transport
# Docs https://developer.vmware.com/docs/18555/GUID-75E27FA9-2E40-4CBF-BF3D-22DCFC8F11F7.html
# >> The instance-id key is required. All other keys are optional.
- name: Set cloud-init variables for customization specification
  when: register_provisioned_host_single_info.value.power_state is defined and register_provisioned_host_single_info.value.power_state != "POWERED_ON"
  ansible.builtin.set_fact:
    metadata_yaml:
      instance-id: "{{ inventory_hostname }}"
      hostname: "{{ inventory_hostname }}"
      local-hostname: "{{ inventory_hostname }}"
      network:
        version: 2
        ethernets:
          nics:
            match:
              name: e*
            dhcp4: true
            dhcp6: false
      public_ssh_keys:
        - "{{ lookup('ansible.builtin.file', sap_vm_provision_ssh_host_public_key_file_path) }}"

    userdata_yaml_text: |
      #cloud-config

      hostname: {{ inventory_hostname }}
      fqdn: {{ inventory_hostname }}.{{ sap_vm_provision_dns_root_domain }}

      # timezone: "Etc/UTC"

      # Ensure root login is enabled
      disable_root: false

      # Ensure SSH password authentication is disabled for all users
      ssh_pwauth: false

      # Ensure all existing SSH Keys are removed from host
      ssh_deletekeys: true

      # By default, (most) ssh host keys are printed to the console
      # Set emit_keys_to_console to false suppresses this output
      ssh:
        emit_keys_to_console: false

      # By default, the fingerprints of the authorized keys for the users
      # cloud-init adds are printed to the console. Setting
      # no_ssh_fingerprints to true suppresses this output
      no_ssh_fingerprints: false

      # For first user in the cloud-init configuration, set the SSH Public Key
      ssh_authorized_keys:
        - {{ lookup('ansible.builtin.file', sap_vm_provision_ssh_host_public_key_file_path) }}

      # Add entry to /root/.ssh/authorized_keys
      # Do not lock password once access to host, however password authentication for SSH remains disabled
      # Ensure SSH password authentication is disabled for root by 'ssh_pwauth' config
      users:
        - name: root
          ssh_authorized_keys:
            - {{ lookup('ansible.builtin.file', sap_vm_provision_ssh_host_public_key_file_path) }}
          lock_passwd: false

      # After first boot of the VMware VM Template, disable cloud-init from running again
      write_files:
        - path: /etc/cloud/cloud-init.disabled
          permissions: "0644"
          content: ""


# Doc 1 https://developer.vmware.com/apis/vsphere-automation/latest/vcenter/api/vcenter/vm/vm/guest/customization/put/
# Doc 2 https://developer.vmware.com/docs/18555/GUID-75E27FA9-2E40-4CBF-BF3D-22DCFC8F11F7.html
# >> metadata as JSON/YAML, userdata as no compression or base64 encoding
# Error 400 com.vmware.vapi.std.errors.not_allowed_in_current_state : if the virtual machine vm is not in a powered off state.
- name: Apply customization specification to the VM in Powered Off state
  when: register_provisioned_host_single_info.value.power_state is defined and register_provisioned_host_single_info.value.power_state != "POWERED_ON"
  vmware.vmware_rest.vcenter_vm_guest_customization:
    vm: '{{ register_vmware_vm_cluster_host_id }}'
    configuration_spec:
      cloud_config:
        type: CLOUDINIT
        cloudinit:
          metadata: "{{ metadata_yaml | to_json(ensure_ascii=true) }}"
          userdata: "{{ userdata_yaml_text | trim }}" # remove last newline character
      # linux_config:
    interfaces: []
    global_DNS_settings: {}


- name: Ensure VM is Powered ON
  register: register_vm_power_info
  vmware.vmware_rest.vcenter_vm_power:
    state: start
    vm: "{{ register_vmware_vm_cluster_host_id }}"
  # Wait until VM is powered on
  until: (register_vm_power_info.value.error_type is defined and register_vm_power_info.value.error_type == "ALREADY_IN_DESIRED_STATE")
  retries: 15
  delay: 60

- name: Show VM Information
  register: register_vm_info
  vmware.vmware_rest.vcenter_vm_info:
    vm: '{{ register_vmware_vm_cluster_host_id }}'
  # Wait until VM is powered on
  until: register_vm_info.value.power_state == "POWERED_ON"
  retries: 45
  delay: 20

- name: Get guest networking information (wait until DHCP assigns IP Address for host)
  register: register_vm_nic_info
  vmware.vmware_rest.vcenter_vm_guest_networking_interfaces_info:
    vm: '{{ register_vmware_vm_cluster_host_id }}'
  # Wait until VM Tools is running
  until: (register_vm_nic_info.value.error_type | default("")) != "SERVICE_UNAVAILABLE" and (register_vm_nic_info.value[0].ip.ip_addresses | length) > 0
  retries: 45
  delay: 20


# Use IP Address from the preferred vNIC
- name: Create fact for delegate host IP
  ansible.builtin.set_fact:
    provisioned_private_ip: "{{ ((register_vm_nic_info.value | map(attribute='ip.ip_addresses')) | flatten | selectattr('state', '==', 'PREFERRED') | first).ip_address }}"


- name: Collect only facts about hardware
  register: host_disks_info
  ansible.builtin.setup:
    gather_subset:
      - hardware
  remote_user: root
  become: true
  become_user: root
  delegate_to: "{{ provisioned_private_ip }}"
  delegate_facts: false
  vars:
    ansible_ssh_private_key_file: "{{ sap_vm_provision_ssh_host_private_key_file_path }}"
    ansible_ssh_common_args: -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ForwardX11=no

- name: Collect only facts about network
  register: vmware_vm_network_info
  ansible.builtin.setup:
    gather_subset:
      - default_ipv4
      - network
  remote_user: root
  become: true
  become_user: root
  delegate_to: "{{ provisioned_private_ip }}"
  delegate_facts: false
  vars:
    ansible_ssh_private_key_file: "{{ sap_vm_provision_ssh_host_private_key_file_path }}"
    ansible_ssh_common_args: -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ForwardX11=no

#- name: Output disks
#  ansible.builtin.debug:
#    var: hostvars[inventory_hostname].ansible_devices.keys() | list

#- name: Debug Ansible Facts devices used list
#  ansible.builtin.debug:
#    msg: "{{ host_disks_info.ansible_facts.ansible_device_links.ids.keys() | list }}"


- name: Set fact for available storage volume device names
  ansible.builtin.set_fact:
    available_volumes: |-
      {% set letters = 'bcdefghijklmnopqrstuvwxyz' %}
      {% set ansible_facts_devices_used_list = host_disks_info.ansible_facts.ansible_device_links.ids.keys() | list %}
      {% set volumes = [] %}
      {%- for letter in letters -%}
        {% for device in ansible_facts_devices_used_list -%}
          {% if '/dev/sd' + letter not in device -%}
            {% set dev = volumes.append('/dev/sd' + letter) %}
          {%- endif %}
        {%- endfor %}
      {% endfor %}
      {{ volumes | list | unique }}

# - name: Debug available_volumes
#   ansible.builtin.debug:
#     msg: "{{ available_volumes }}"


# Combination of only the filesystem volume information from the lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')
# for volume device assignment.
# This task assigns device names for each volume to be created.
- name: Set fact for target device map
  ansible.builtin.set_fact:
    filesystem_volume_map: |
      {% set volume_map = [] -%}
      {% set av_vol = available_volumes -%}
      {% for storage_item in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].storage_definition -%}
        {% for idx in range(0, storage_item.disk_count | default(1)) -%}
          {% if (storage_item.filesystem_type is defined) -%}
            {% if ('swap' in storage_item.filesystem_type and storage_item.swap_path is not defined)
            or ('swap' not in storage_item.filesystem_type and storage_item.nfs_path is not defined) -%}
              {% set vol = volume_map.extend([
              {
                'definition_key': storage_item.name,
                'device': av_vol[0],
                'fstype': storage_item.filesystem_type | default('xfs'),
                'name': storage_item.name + idx|string,
                'size': storage_item.disk_size | default(0),
                'type': storage_item.disk_type | default('')
              }
              ]) %}
            {%- set _ = av_vol.pop(0) -%}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
      {%- endfor %}
      {{ volume_map }}

#- name: Debug filesystem_volume_map
#  ansible.builtin.debug:
#    msg: "{{ filesystem_volume_map }}"


# The volume creation task requires the above task to define the parameter
# which contains the calculated unique device names.
- name: Provision Virtual Disk volumes and attach to VM
  vmware.vmware_rest.vcenter_vm_hardware_disk:
    vm: "{{ register_vmware_vm_cluster_host_id }}"
    type: "{{ vol_item.type | upper }}"
    state: present
    label: "{{ vol_item.name }}"
    new_vmdk:
      name: "{{ inventory_hostname }}_{{ vol_item.name }}" # VMDK filename
      capacity: "{{ vol_item.size | human_to_bytes(default_unit='G') }}"
  loop: "{{ filesystem_volume_map }}"
  loop_control:
    loop_var: vol_item
    index_var: vol_item_index
    label: "{{ vol_item.definition_key }}: {{ vol_item.name }} (size: {{ vol_item.size }})"
  when:
    - vol_item.fstype is defined
    - vol_item.size > 0
  register: volume_provisioning
  failed_when: not volume_provisioning.value is defined and not 'already exists' in volume_provisioning.msg


- name: Append loop value to register
  ansible.builtin.set_fact:
    register_provisioned_host_single: "{{ register_provisioned_host_single_info | combine( { 'host_node' : inventory_hostname } , { 'vmware_vm_network_info' : vmware_vm_network_info } , { 'sap_host_type' : lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].sap_host_type } , { 'sap_system_type' : (lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].sap_system_type | default('')) } ) }}"

- name: Append output to merged register
  ansible.builtin.set_fact:
    register_provisioned_host_all: "{{ register_provisioned_host_all + [register_provisioned_host_single] }}"
